\documentclass{article}
\setcounter{secnumdepth}{0}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage{tcolorbox}
\usepackage{url}
\usepackage{etoolbox}
\usepackage[colorlinks,citecolor=red,urlcolor=blue,bookmarks=false,hypertexnames=true]{hyperref} 
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{tabularx}
\usepackage{geometry}
\usepackage{listings}
\usepackage{color}
\usepackage[colorlinks]{hyperref}
\usepackage{cleveref}
\usepackage{float}
\usepackage{array}
\usepackage{acro}
\usepackage{pdfpages}

\acsetup{first-style=short}
\DeclareAcronym{MCU}{
  short = MCU ,
  long  = Main Communication Unit ,
  class = abbrev
}
\DeclareAcronym{V2B}{
  short = V2B ,
  long  = Vehicle-to-Building ,
  class = abbrev
}
\DeclareAcronym{DB}{
  short = UN ,
  long  = Database ,
  class = abbrev
}
\DeclareAcronym{SQL}{
  short = SQL ,
  long  = Structured Query Language ,
  class = abbrev
}
\DeclareAcronym{COVID}{
  short = COVID-19 ,
  long  = Corona Virus Disease 2019 ,
  class = abbrev
}



\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{Black}{rgb}{0.0, 0.0, 0.0}

\hypersetup{citecolor=Black}
\hypersetup{linkcolor=Black}
\hypersetup{urlcolor=Black}

\setlength{\parindent}{0em}
\setlength{\parskip}{1em}

\makeatletter
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
            {-2.5ex\@plus -1ex \@minus -.25ex}%
            {1.25ex \@plus .25ex}%
            {\normalfont\normalsize\bfseries}}
\makeatother
\setcounter{tocdepth}{4}  

\lstset{frame=tb,
extendedchars = true,
texcl=true,
  language=C++,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}


\title{Final project report\large\\
MPSE2201 System design and engineering}
\date{\today}
\author{Group 10}



\begin{document}
%DISSE FORKORTELSENE MÅ HENVISES TIL I DOKUMENTET FOR Å DUKKE OPP I LISTA


\selectlanguage{english}
\maketitle
\thispagestyle{empty}
\begin{center}
\includegraphics[width=\linewidth,height=0.2\textheight,keepaspectratio]{img/USN.png}
\end{center}
\newpage
\section{Abstract}

\newpage

\tableofcontents

\newpage
\phantomsection
\addcontentsline{toc}{section}{\listfigurename}
\listoffigures

\newpage
\phantomsection
\addcontentsline{toc}{section}{Abbreviations}
\printacronyms[include-classes=abbrev,name=Abbreviations]
\newpage

%INTRODUCTION
\section {Introduction}
\subsection{Assignment}
\subsection{Report}
\subsection{Our Systems Engineering Process}
%PLANNING
\section{Planning}
\subsection{Contract of Operations}

\includepdf[pages=-]{pdf/ContractTerra.pdf}
\subsection{Complications due to \ac{COVID}}
\subsection{Tools}
\textbf{Jira}
\textbf{Microsoft Teams}
\textbf{Facebook Messenger}
\textbf{Microsoft Visio}
\textbf{Microsoft Word}
\textbf{Microsoft Excel}
\textbf{Adobe Illustrator}
\textbf{Gantt}
\textbf{Draw.io}
\textbf{Sweet Home 3D}
\textbf{Solidworks}
\textbf{Programming Languages}
\textbf{Github}
\textbf{MySQL}
\textbf{MongoDB}
\subsection{Internal Discussions}
%THE PROBLEM
\section{The Problem}
\subsection{Understanding the Problem}
\subsection{Stakeholders}
\subsection{Context}
%REQUIREMENTS
\section{Requirements}
\subsection{User Requirements}
\subsection{Effectiveness Measures}
\subsection{System Requirements}
\subsubsection{Functional}
\subsubsection{Temporal Performance}
\subsubsection{Non-Temporal Performance Requirements}
\subsubsection{Interface Requirements}
\subsubsection{Design Requirements}
%CORE TECHNICAL PROCESS
\section{System Architecting}
%Tier 0
\subsection{Tier 0: The System in Its Context}
\subsubsection{Operation}
\subsubsection{Behavior}
\subsubsection{Structure}
\paragraph{Harvesting Energy}

\textbf{Solar}

\textbf{Hydro}

\textbf{Wind}

\textbf{Wind}

\textbf{Nuclear}

\paragraph{Storing Energy}
\textbf{Batteries}
\textbf{Vehicle-to-Building (\ac{V2B})}
\textbf{Hydrogen}
\textbf{Water Magazine}
\paragraph{Generating Heat}
\textbf{Burning Trash}

\textbf{Geothermal}

\textbf{Burning Pellets}

\textbf{District Heating}

\subsubsection{Trade-Off}
\paragraph{Harvesting Energy}
\paragraph{Storing Energy}
\paragraph{Generating Heat}
\paragraph{Recommendations}
\subsubsection{Derived Requirements}

%Tier 1
\subsection{Tier 1: The System}
\subsubsection{Operation}

\paragraph{Control System}

\paragraph{Photovoltaic System}

\paragraph{Energy Storage system}

\paragraph{Geothermal Heating/Cooling}

\subsubsection{Behavior}

\subsubsection{Structure}

\subsubsection{Trade-Off}

\paragraph{Control System}

\paragraph{Recommendations}

\subsubsection{Derived Requirements}


%Tier 2
\subsection{Tier 2: Subsystems}
\subsubsection{Energy Storage System}
\paragraph{Behavior}
\paragraph{Structure}
\subsubsection{Control System}

\paragraph{Operation}

\paragraph{Behavior}

\textbf{Control Unit}

\textbf{\ac{MCU} (Main Communication Unit)}

\textbf{Databases}

\textit{MySQL}
\ac{SQL}
\textit{MongoDB}


\textbf{Data-Gathering Software}

\textit{Historical Data}

\textit{Continuous Data}

\textbf{Machine Learning Software}

\textbf{Application / Website}

\textbf{Developer Tools}

\paragraph{Structure}

\paragraph{Derived Requirements}

%BUILD AND TEST PLAN
\section{Build and Test Plan}

%VERIFICATION
\section{Verification}
\subsection{Production}
\subsection{Capacity for Storage}
\subsection{Prototypes / Proof-of-Concept}
\subsubsection{Machine Learning}
\paragraph{Predicting Solar Panel Power Production}
\paragraph{Predicting Power Prices}
\subsubsection{Web-Application}

%RISK
\section{Risk}

%ECONOMICS
\section{Economics}
\subsection{Our Budget}
\subsection{Our Cash Flow}
\subsection{Residents Budget}
\subsection{Residents Cash Flow}


%CONCLUSION
\section{Conclusion}


\newpage
%Referanse
\nocite{*}
\bibliographystyle{plain}
\bibliography{ref}
\addcontentsline{toc}{section}{References}

\newpage
%APPENDICES
\section{Appendices}

\subsection{Figures}
\begin{figure}[H]
 \centering
  \includegraphics[width=200pt]{img/ConceptMatrixChosen.png}
 \caption{Use Case Diagram Example}
 \end{figure}

\subsection{Code}
\subsubsection{Historical Weather Web-Crawler}
\begin{lstlisting}
%LIM INN KODEN DIN HER TARALD
\end{lstlisting}
\subsubsection{MongoDB Filler}
\begin{lstlisting}
#include <iostream>
#include <fstream>
#include <string>
#include <bsoncxx/builder/stream/document.hpp>
#include <bsoncxx/json.hpp>
#include <mongocxx/client.hpp>
#include <mongocxx/instance.hpp>
#include "boost/property_tree/ptree.hpp"
#include "boost/property_tree/json_parser.hpp"
#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/foreach.hpp>
#include <thread>
#include <vector>
#include <functional>
#include <algorithm>
#include "power.h"
#include <boost/algorithm/string/replace.hpp>

using boost::property_tree::ptree;
using boost::posix_time::ptime;
using boost::posix_time::from_iso_string;

bool fillSunWall(std::string, mongocxx::client&);
bool fillWeather(mongocxx::client&);
bool parseSun();
bool fillPowerPrices(mongocxx::client&);

std::string powerPath = "data/PowerData/El";
std::string powerExt = ".csv";

std::string weatherPath = "data/WeatherData/data2.json";
std::string sunPath = "data/SolarData/";
std::string jsonExt = ".json";


int main(int, char**) 
{
    mongocxx::instance inst{};
    mongocxx::client conn{
        mongocxx::uri{
            "mongodb+srv://kent:<Password>@terrasolaris-robmp.azure.
		mongodb.net/test?retryWrites=true&w=majority"}};

    fillSunWall("roof", conn);
    fillSunWall("south", conn);
    fillSunWall("west", conn);
    fillSunWall("east", conn);
    fillWeather(conn);
    fillPowerPrices(conn);

    return 0;
}

bool fillSunWall(std::string direction, mongocxx::client& conn)
{
    for(int i = 1; i <= 3; i++)
    {
        std::cout << "Document: " << direction + std::to_string(i) << "\n";
        std::ifstream ist(sunPath + direction + std::to_string(i) + jsonExt);
        ptree pt;
        read_json(ist, pt);

        pt = pt.get_child("outputs").get_child("hourly");

        for (auto & array_element : pt) {

            std::string time = array_element.second.get<std::string>("time");
            time.replace(8, 1, "T");
            ptime t = from_iso_string(time);
            double p_val = array_element.second.get<double>("P");

            bsoncxx::builder::stream::document document{};
            auto builder = bsoncxx::builder::stream::document{};
            bsoncxx::document::value doc_value = builder
                << "time" << to_iso_extended_string(t)
                << "p" << p_val
                << bsoncxx::builder::stream::finalize;
            auto collection = conn["Terra"]["sun" + direction];
            collection.insert_one(doc_value.view());
        }
    }
    return true;
}

void fillData(boost::property_tree::ptree &pt, std::string time, mongocxx::client& conn)
{
    bsoncxx::builder::stream::document doc{};
    time = time.substr(0, 16);
    doc << "time" << time;

    for (auto & array_element : pt) {

        std::string elementId = array_element.second.get<std::string>("elementId");
        double value = array_element.second.get<double>("value");
        doc << elementId << array_element.second.get<double>("value");
    }

    
    auto collection = conn["Terra"]["weather"];
    collection.insert_one(doc.view());
}

void fillDoc(boost::property_tree::ptree &pt, std::string time, mongocxx::client& conn)
{
    if(pt.empty())
    {
        return;
    }
    else
    {
        for (boost::property_tree::ptree::iterator pos = pt.begin(); pos != pt.end();)
        {
            if(pos->first == "referenceTime")
            {
                time = pos->second.data();
            }
            else if(pos->first == "observations")
            {
                fillData(pos->second, time, conn);
            }
            fillDoc(pos->second, time, conn);
            ++pos;
        }
    }
}

bool fillWeather(mongocxx::client& conn)
{
    std::ifstream ist(weatherPath);
    ptree pt;
    read_json(ist, pt);
    bsoncxx::builder::stream::document doc{};
    std::vector<std::thread*> threads;

    fillDoc(pt, "", conn);

    return true;
}


bool fillPowerPrices(mongocxx::client& conn)
{
    const int dateIndex = 0;
    const int hourIndex = 1;
    const int osloIndex = 10;

    for(int year = 2013; year <= 2020; year++)
    {
        std::cout << "Year: " << year << "\n";
        std::ifstream file;
        file.open(powerPath + std::to_string(year) + powerExt);
        auto table = readCSV(file);
        for(int i = 3; i < table.size(); i++)
        {
            std::string date = table[i][dateIndex];
            std::string hour = table[i][hourIndex];
            std::string price = (table[i][osloIndex]);
            boost::replace_all(price, ",", ".");

            if(price.empty())
            {
                continue;
            }
            double priceNum = std::stod(price);
            std::string time = date.substr(6, 4) + "-" + date.substr(3, 2) + "-" + date.substr(0, 2) + "T" + hour.substr(0, 2) + ":00:00";

            bsoncxx::builder::stream::document document{};
            auto builder = bsoncxx::builder::stream::document{};
            bsoncxx::document::value doc_value = builder
                    << "time" << time
                    << "price" << priceNum
                    << bsoncxx::builder::stream::finalize;
                auto collection = conn["Terra"]["powerPrices"];
                collection.insert_one(doc_value.view());
        }
    }
        

    return true;
}







\end{lstlisting}


\subsubsection{Historical Hourly Avg. Power Price}
\begin{lstlisting}
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeRegressor  
from sklearn import metrics
import datetime as dt
import pymongo
from mongoConfigFile import *

hourPrices = [0] * 24
hourPoints = [0] * 24
hours = list(range(0, 24))

clientUrl = ("mongodb+srv://{0}:{1}@terrasolaris-robmp.azure.mongodb.net/test?retryWrites=true&w=majority".
		format(mongoUsername, mongoPassword))
client = pymongo.MongoClient(clientUrl)
db = client["Terra"]

def main():
	fillData()
	drawPower()

def fillData():
	print("Fyller priser..")
	collection = db["powerPrices"]
	#cursor = collection.find({"time": "2005-01-01T00:00:00"})
	cursor = collection.find({})
	for document in cursor:

		date = pd.to_datetime(document["time"])
		hourPrices[int(date.hour)] += document["price"]
		hourPoints[int(date.hour)] += 1

def drawPower():
	print("drawing")
	X = []
	for i in range(0, len(hours)):
		X.append(hourPrices[i] / hourPoints[i])

	y = hours

	objects = hours
	y_pos = np.arange(len(hours))
	performance = X

	plt.bar(y_pos, performance, align='center', alpha=0.5)
	plt.xticks(y_pos, objects)
	plt.ylabel('NOK per MWh')
	plt.xlabel('Hour of day')
	plt.title('Average hourly power price 2013-2020')

	plt.show()

main()
\end{lstlisting}

\subsubsection{Machine Learning}
\paragraph{Solar Power Production}
\begin {lstlisting}
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeRegressor  
from sklearn import metrics
import datetime as dt
import pymongo
from mongoConfigFile import *

power = []
dates = []
weather = {}
data = {'Year': [], 'Month': [], 'Day': [], 'Hour': [], 'Temp': [], 
'CloudAreaFraction': [], 'CloudBaseHeight': [], 'WeatherType': [], 'Power': []}
clientUrl = ("mongodb+srv://{0}:{1}@terrasolaris-robmp.azure.mongodb.net/test?retryWrites=true&w=majority".
		format(mongoUsername, mongoPassword))
client = pymongo.MongoClient(clientUrl)
db = client["Terra"]

def main():
	fillData()
	fillWeather()
	dataset = fillPanda()
	betterPredictWithWeather(dataset)

def fillData():
	print("Fyller sol..")
	collection = db["sunsouth"]
	cursor = collection.find({})
	for document in cursor:
		dates.append(document["time"])
		power.append(document["p"])

def fillWeather():
	print("Filling weather..")
	collection = db['weather']
	cursor = collection.find({})
	for document in cursor:
		arr = []
		arr.append(document.get('air_temperature'))
		arr.append(document.get('cloud_area_fraction'))
		arr.append(document.get('cloud_base_height'))
		arr.append(document.get('weather_type'))
		weather[document['time'] + ':00'] = arr


def fillPanda():
	print('Fyller Panda..')
	db = client["Terra"]
	collection = db["weather"]

	for date in dates:
		l = weather.get(date)
		date = pd.to_datetime(date)
		data['Year'].append(int(date.year))
		data['Month'].append(int(date.month))
		data['Day'].append(int(date.day))
		data['Hour'].append(int(date.hour))
		default = None
		data['Temp'].append(l[0] if l is not None and 0 < len(l) else default)
		data['CloudAreaFraction'].append(l[1] if l is not None and 1 < len(l) else default)
		data['CloudBaseHeight'].append(l[2] if l is not None and 2 < len(l) else default)
		data['WeatherType'].append(l[3] if l is not None and 3 < len(l) else default)

	data['Power'] = power
	df = pd.DataFrame(data=data)
	df.fillna(df.mean(), inplace=True)
	df = df.reset_index()
	return df

def betterPredictWithWeather(dataset):
	X = dataset[['Year', 'Month', 'Day', 'Hour', 'Temp', 'CloudAreaFraction', 'CloudBaseHeight', 'WeatherType']].values
	y = dataset['Power'].values

	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, shuffle=False)
	regressor = DecisionTreeRegressor(random_state = 0)
	regressor.fit(X_train, y_train)
	y_pred = regressor.predict(X_test)

	print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
	
	X_dates = []
	for date in X_test:
		X_dates.append(dt.datetime(int(date[0]), int(date[1]), int(date[2]), int(date[3])))

	df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index = X_dates)
	
	df1 = df.head(100)
	ax = df1.plot(kind='bar',figsize=(200,100))
	plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
	plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
	
	x_labels = df1.index.strftime('%d-%b-%y %H:00')
	ax.set_xticklabels(x_labels)
	ax.set_xlabel('Date')
	ax.set_ylabel('Wh')
	plt.show()


main()
\end{lstlisting}
\subsubsection{Machine Learning, Power Price Prediction}
\begin{lstlisting}
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeRegressor  
from sklearn import metrics
import datetime as dt
import pymongo
from mongoConfigFile import *

powerPrices = []
dates = []
data = {'Year': [], 'Month': [], 'Day': [], 'Hour': [], 'PowerPrice': []}
clientUrl = ("mongodb+srv://{0}:{1}@terrasolaris-robmp.azure.mongodb.net/test?retryWrites=true&w=majority".
		format(mongoUsername, mongoPassword))
client = pymongo.MongoClient(clientUrl)
db = client["Terra"]

def main():
	fillData()
	dataset = fillPanda()
	betterPredict(dataset)

def fillData():
	print("Fyller priser..")
	collection = db["powerPrices"]
	#cursor = collection.find({"time": "2005-01-01T00:00:00"})
	cursor = collection.find({})
	for document in cursor:
		dates.append(document["time"])
		powerPrices.append(document["price"])

def fillPanda():
	print('Fyller Panda..')

	for date in dates:
		date = pd.to_datetime(date)
		data['Year'].append(int(date.year))
		data['Month'].append(int(date.month))
		data['Day'].append(int(date.day))
		data['Hour'].append(int(date.hour))

	data['PowerPrice'] = powerPrices
	df = pd.DataFrame(data=data)
	df.fillna(value=pd.np.nan, inplace=True)
	df = df.reset_index()
	return df


def betterPredict(dataset):
	X = dataset[['Year', 'Month', 'Day', 'Hour']].values
	y = dataset['PowerPrice'].values

	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, shuffle=False)#, random_state=0)

	regressor = DecisionTreeRegressor(random_state = 0)
	regressor.fit(X_train, y_train)
	y_pred = regressor.predict(X_test)

	X_dates = []
	for date in X_test:
		X_dates.append(dt.datetime(date[0], date[1], date[2], date[3]))

	df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index = X_dates)
		
	df1 = df.head(50)
	ax = df1.plot(kind='bar',figsize=(200,100))
	plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
	plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
	
	x_labels = df1.index.strftime('%d-%b-%y %H:00')
	ax.set_xticklabels(x_labels)
	ax.set_xlabel('Date')
	ax.set_ylabel('NOK/MWh')
	plt.show()

	print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  

main()
\end{lstlisting}

\subsubsection{Web-Application}
\begin{lstlisting}
%LIM INN KODEN DIN HER TARALD
\end{lstlisting}


\end{document}